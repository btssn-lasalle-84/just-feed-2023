class Intervention
!!!177322.cpp!!!	Intervention(in listeDistributeursAIntervenir : QVector<Distributeur*>)
    qDebug() << Q_FUNC_INFO << "dateIntervention" << dateIntervention << "nb distributeurs"
             << listeDistributeursAIntervenir.size();
!!!203690.cpp!!!	Intervention(in idIntervention : int, in idOperateur : int, in idDistributeur : int, in dateIntervention : QDate, in aRemplir : bool, in aDepanner : bool, in etat : QString)
    qDebug() << Q_FUNC_INFO << "dateIntervention" << dateIntervention << "idIntervention"
             << idIntervention << "idOperateur" << idOperateur << "idDistributeur" << idDistributeur
             << "aRemplir" << aRemplir << "aDepanner" << aDepanner << "etat" << etat;
!!!130840.cpp!!!	~Intervention()
    qDebug() << Q_FUNC_INFO;
!!!177450.cpp!!!	getDateIntervention() : QDate
    return this->dateIntervention;
!!!177578.cpp!!!	getDistributeurs() : QVector<Distributeur*>
    return this->distributeurs;
!!!177706.cpp!!!	getARemplir() : bool
    return this->aRemplir;
!!!177834.cpp!!!	getADepanner() : bool
    return this->aDepanner;
!!!177962.cpp!!!	getIdIntervention() : int
    return idIntervention;
!!!178090.cpp!!!	getIdOperateur() : int
    return this->idOperateur;
!!!203818.cpp!!!	getIdDistributeur() : int
    return this->idDistributeur;
!!!203946.cpp!!!	getEtat() : QString
    return Intervention::getEtat(this->etat);
!!!204074.cpp!!!	getEtatFormate() : QString
    return Intervention::getEtatFormate(this->etat);
!!!178218.cpp!!!	estEffectuee() : bool
    if(etat == VALIDEE)
        return true;
    else
        return false;
!!!178346.cpp!!!	estAIntervenir() : bool
    if(etat == A_FAIRE)
        return true;
    else
        return false;
!!!178474.cpp!!!	setDateIntervention(in dateIntervention : QDate) : void
    this->dateIntervention = dateIntervention;
!!!178602.cpp!!!	setARemplir(in aRemplir : bool) : void
    this->aRemplir = aRemplir;
!!!178730.cpp!!!	setADepanner(in aDepanner : bool) : void
    this->aDepanner = aDepanner;
!!!178858.cpp!!!	setIdOperateur(in idOperateur : int) : void
    this->idOperateur = idOperateur;
!!!178986.cpp!!!	setIdIntervention(in numeroIntervention : int) : void
    this->idIntervention = numeroIntervention;
!!!204202.cpp!!!	setIdDistributeur(in numeroDistributeur : int) : void
    this->idDistributeur = numeroDistributeur;
!!!204330.cpp!!!	setEtat(in etat : QString) : void
    this->etat = Intervention::getEtat(etat);
!!!179114.cpp!!!	ajouterDistributeur(inout distributeur : Distributeur) : void
    this->distributeurs.push_back(distributeur);
!!!179242.cpp!!!	effectuer(in effectuee : bool) : void
    if(effectuee)
        this->etat = VALIDEE;
    else
        this->etat = A_FAIRE;
!!!179370.cpp!!!	intervenir(in aIntervenir : bool) : void
    effectuer(!aIntervenir);
!!!179498.cpp!!!	creer() : void
    for(int i = 0; i < distributeurs.size(); i++)
    {
        affecterEtatIntervention(i);
        qDebug() << Q_FUNC_INFO << "distributeur" << distributeurs[i]->getNom() << "aRemplir"
                 << this->getARemplir() << "aDepanner" << this->getADepanner();
        this->idIntervention = ajouterIntervention(i);
    }
    if(this->idIntervention != ID_INTERVENTION_NON_DEFINI)
    {
        intervenir(true);
        for(int i = 0; i < distributeurs.size(); ++i)
        {
            ajouterApprovisionnement(i);
        }
    }
!!!179626.cpp!!!	affecterEtatIntervention(in indexDistributeur : int) : void
    this->setARemplir(false);
    this->setADepanner(false);
    for(int j = 0; j < distributeurs[indexDistributeur]->getNbBacs(); j++)
    {
        qDebug() << Q_FUNC_INFO << "distributeur" << distributeurs[indexDistributeur]->getNom()
                 << "bac" << distributeurs[indexDistributeur]->getBac(j)->getNomProduit()
                 << "aRemplir" << distributeurs[indexDistributeur]->getBac(j)->getARemplir()
                 << "aDepanner" << distributeurs[indexDistributeur]->getBac(j)->getADepanner();
        if(distributeurs[indexDistributeur]->getBac(j)->getARemplir() &&
           distributeurs[indexDistributeur]->getBac(j)->getADepanner() &&
           !distributeurs[indexDistributeur]->getBac(j)->getAIntervenir())
        {
            this->setARemplir(true);
            this->setADepanner(true);
            break;
        }
        else if((distributeurs[indexDistributeur]->getBac(j)->getARemplir()) &&
                !distributeurs[indexDistributeur]->getBac(j)->getAIntervenir())
        {
            this->setARemplir(true);
            break;
        }
        else if(distributeurs[indexDistributeur]->getBac(j)->getADepanner() &&
                !distributeurs[indexDistributeur]->getBac(j)->getAIntervenir())
        {
            this->setADepanner(true);
            break;
        }
    }
!!!179754.cpp!!!	ajouterIntervention(in indexDistributeur : int) : int
    int     numeroIntervention = estPlanifiee(distributeurs[indexDistributeur]->getId());
    QString requete;
    if(this->getARemplir() || this->getADepanner())
    {
        if(numeroIntervention == ID_INTERVENTION_NON_DEFINI)
        {
            requete = "INSERT INTO Intervention (idOperateur, idDistributeur, dateIntervention, "
                      "etat, aRemplir, aDepanner) VALUES (" +
                      QString::number(getIdOperateur()) + ", " +
                      QString::number(distributeurs[indexDistributeur]->getId()) + ", " + "'" +
                      this->getDateIntervention().toString("yyyy-MM-dd") + "'" + ", 'A_FAIRE', " +
                      QString::number(this->getARemplir()) + ", " +
                      QString::number(this->getADepanner()) + ");";
            qDebug() << Q_FUNC_INFO << "requete" << requete;
            baseDeDonnees->executer(requete);
            requete = "SELECT MAX(idIntervention) FROM Intervention;";
            qDebug() << Q_FUNC_INFO << "requete" << requete;
            QString idIntervention;
            baseDeDonnees->recuperer(requete, idIntervention);
            qDebug() << Q_FUNC_INFO << "idIntervention" << idIntervention;
            bool conversion;
            numeroIntervention = idIntervention.toInt(&conversion);
            if(conversion)
                return numeroIntervention;
            else
                return ID_INTERVENTION_NON_DEFINI;
        }

        if(this->getADepanner())
        {
            requete = "UPDATE Intervention SET aDepanner = 1 WHERE idIntervention = " +
                      QString::number(numeroIntervention) + ";";
            qDebug() << Q_FUNC_INFO << "requete" << requete;
            baseDeDonnees->executer(requete);
            //!< @todo update l'operateur si il a changé
        }

        if(this->getARemplir())
        {
            requete = "UPDATE Intervention SET aRemplir = 1 WHERE idIntervention = " +
                      QString::number(numeroIntervention) + ";";
            qDebug() << Q_FUNC_INFO << "requete" << requete;
            baseDeDonnees->executer(requete);
            //!< @todo update l'operateur si il a changé
        }
    }

    return numeroIntervention;
!!!179882.cpp!!!	ajouterApprovisionnement(in indexDistributeur : int) : void
    QString          requete = "SELECT idBac FROM Approvisionnement";
    QVector<QString> listeDeBacPlanifie;
    baseDeDonnees->recuperer(requete, listeDeBacPlanifie);

    for(int j = 0; j < distributeurs[indexDistributeur]->getNbBacs(); j++)
    {
        if(distributeurs[indexDistributeur]->getBac(j)->getARemplir() &&
           !estBacAttribue(indexDistributeur, j))
        {
            qDebug() << Q_FUNC_INFO << "bacEstAttribue" << estBacAttribue(indexDistributeur, j);
            if(estPlanifiee(distributeurs[indexDistributeur]->getId()))
            {
                requete = "INSERT INTO Approvisionnement (idIntervention, idBac, "
                          "poidsAPrevoir, heureApprovisionnement) VALUES (" +
                          QString::number(idIntervention) + ", " +
                          QString::number(distributeurs[indexDistributeur]->getBac(j)->getIdBac()) +
                          ", " +
                          QString::number(
                            distributeurs[indexDistributeur]->getBac(j)->getQuantiteARemplir()) +
                          ", " + "'');";
                qDebug() << Q_FUNC_INFO << "requete" << requete;
                baseDeDonnees->executer(requete);
            }
        }
    }
!!!180010.cpp!!!	estPlanifiee(in idDistributeur : int) : int
    QString requete;
    requete = "SELECT idIntervention,idDistributeur FROM Intervention WHERE idDistributeur = " +
              QString::number(idDistributeur) + " AND (etat = 'A_FAIRE' OR etat = 'EN_COURS');";
    qDebug() << Q_FUNC_INFO << "requete" << requete;
    QVector<QStringList> idInterventionsBdd;
    baseDeDonnees->recuperer(requete, idInterventionsBdd);

    for(int i = 0; i < idInterventionsBdd.size(); i++)
    {
        if(idInterventionsBdd[i].at(1).toInt() == idDistributeur)
        {
            return idInterventionsBdd[i].at(0).toInt();
        }
    }
    return ID_INTERVENTION_NON_DEFINI;
!!!204458.cpp!!!	estBacAttribue(in idDistributeur : int, in idBac : int) : bool
    /**
     * @todo Cette requête me semble insuffisante
     */
    QString          requete = "SELECT idBac FROM Approvisionnement";
    QVector<QString> listeDeBacPlanifie;
    baseDeDonnees->recuperer(requete, listeDeBacPlanifie);
    qDebug() << Q_FUNC_INFO << "requete" << requete;

    for(int i = 0; i < listeDeBacPlanifie.size(); i++)
    {
        if(listeDeBacPlanifie[i].toInt() ==
           distributeurs[idDistributeur]->getBac(idBac)->getIdBac())
        {
            return true;
        }
    }
    return false;
!!!204586.cpp!!!	getEtat(in etat : Intervention::EtatIntervention) : QString
    if(etat >= A_FAIRE && etat < NB_ETATS)
    {
        QVector<QString> etats = { "A_FAIRE", "VALIDEE", "EN_COURS" };
        return etats[etat];
    }
    return QString();
!!!204714.cpp!!!	getEtat(in etat : QString) : Intervention::EtatIntervention
    QVector<QString> etats = { "A_FAIRE", "VALIDEE", "EN_COURS" };
    for(int i = 0; i < etats.size(); ++i)
    {
        if(etats[i] == etat)
            return EtatIntervention(i);
    }
    return INCONNU;
!!!204842.cpp!!!	getEtatFormate(in etat : Intervention::EtatIntervention) : QString
    if(etat >= A_FAIRE && etat < NB_ETATS)
    {
        QVector<QString> etats = { "À FAIRE", "VALIDÉE", "EN COURS" };
        return etats[etat];
    }
    return QString();
