class BaseDeDonnees
!!!138538.java!!!	getInstance() : BaseDeDonnees
        if(bdd == null)
            bdd = new BaseDeDonnees();
        return bdd;
!!!138666.java!!!	getInstance(in nomBase : String, in identifiant : String, in motDePasse : String, in hostName : String) : BaseDeDonnees
        if(bdd == null)
            bdd = new BaseDeDonnees(nomBase, identifiant, motDePasse, hostName, PORT_DEFAUT);
        return bdd;
!!!138794.java!!!	getInstance(inout handler : Handler) : BaseDeDonnees
        if(bdd == null)
            bdd = new BaseDeDonnees(handler);
        return bdd;
!!!138922.java!!!	getInstance(in nomBase : String, in identifiant : String, in motDePasse : String, in hostName : String, inout handler : Handler) : BaseDeDonnees
        if(bdd == null)
            bdd =
              new BaseDeDonnees(nomBase, identifiant, motDePasse, hostName, PORT_DEFAUT, handler);
        return bdd;
!!!139050.java!!!	BaseDeDonnees()
        this.nomBDD             = NOM_BDD;
        this.identifiant        = IDENTIFIANT;
        this.motDePasse         = MOT_DE_PASSE;
        this.hostName           = HOSTNAME;
        this.port               = PORT_DEFAUT;
        this.listeInterventions = new ArrayList<Intervention>();
        Log.d(TAG,
              "BaseDeDonnees() nom = " + nomBDD + " - identifiant = " + identifiant +
                " - motDePasse = " + motDePasse + " - hostName = " + hostName);

        // Initialise l'url pour la connexion à la base de données MySQL
        // this.url = "jdbc:mysql://" + this.hostName + "/" + this.nomBDD +
        // "?useUnicode=true&characterEncoding=utf8&useSSL=false";
        this.url = "jdbc:mysql://" + this.hostName + "/" + this.nomBDD + "?useSSL=false";
        connecter();
!!!139178.java!!!	BaseDeDonnees(inout handler : Handler)
        this.nomBDD             = NOM_BDD;
        this.identifiant        = IDENTIFIANT;
        this.motDePasse         = MOT_DE_PASSE;
        this.hostName           = HOSTNAME;
        this.port               = PORT_DEFAUT;
        this.handler            = handler;
        this.listeInterventions = new ArrayList<Intervention>();
        Log.d(TAG,
              "BaseDeDonnees() nom = " + nomBDD + " - identifiant = " + identifiant +
                " - motDePasse = " + motDePasse + " - hostName = " + hostName);

        // Initialise l'url pour la connexion à la base de données MySQL
        // this.url = "jdbc:mysql://" + this.hostName + "/" + this.nomBDD +
        // "?useUnicode=true&characterEncoding=utf8&useSSL=false";
        this.url = "jdbc:mysql://" + this.hostName + "/" + this.nomBDD + "?useSSL=false";
        connecter();
!!!139306.java!!!	BaseDeDonnees(in nomBase : String, in identifiant : String, in motDePasse : String, in hostName : String, in port : int)
        Log.d(TAG,
              "BaseDeDonnees() nom = " + nomBase + " - identifiant = " + identifiant +
                " - motDePasse = " + motDePasse + " - hostName = " + hostName);
        this.nomBDD             = nomBase;
        this.identifiant        = identifiant;
        this.motDePasse         = motDePasse;
        this.hostName           = hostName;
        this.port               = port;
        this.handler            = handler;
        this.listeInterventions = new ArrayList<Intervention>();
        // Initialise l'url pour la connexion à la base de données MySQL
        // this.url = "jdbc:mysql://" + this.hostName + "/" + this.nomBDD +
        // "?useUnicode=true&characterEncoding=utf8&useSSL=false";
        this.url = "jdbc:mysql://" + this.hostName + "/" + this.nomBDD + "?useSSL=false";
        connecter();
!!!139434.java!!!	BaseDeDonnees(in nomBase : String, in identifiant : String, in motDePasse : String, in hostName : String, in port : int, inout handler : Handler)
        Log.d(TAG,
              "BaseDeDonnees() nom = " + nomBase + " - identifiant = " + identifiant +
                " - motDePasse = " + motDePasse + " - hostName = " + hostName);
        this.nomBDD             = nomBase;
        this.identifiant        = identifiant;
        this.motDePasse         = motDePasse;
        this.hostName           = hostName;
        this.port               = port;
        this.handler            = handler;
        this.listeInterventions = new ArrayList<Intervention>();
        // Initialise l'url pour la connexion à la base de données MySQL
        // this.url = "jdbc:mysql://" + this.hostName + "/" + this.nomBDD +
        // "?useUnicode=true&characterEncoding=utf8&useSSL=false";
        this.url = "jdbc:mysql://" + this.hostName + "/" + this.nomBDD + "?useSSL=false";
        connecter();
!!!139562.java!!!	setHandler(inout handler : Handler) : void
        this.handler = handler;
!!!139690.java!!!	connecter() : boolean
        if(!BaseDeDonnees.active)
            return false;

        try
        {
            if(!estConnecte())
            {
                ConnexionMySql connexionMySql = new ConnexionMySql();
                connexionMySql.execute();
                Log.d(TAG, "connecter() retour = " + connexionMySql.get());
                return connexionMySql.get();
            }
            return true;
        }
        catch(InterruptedException e)
        {
            // e.printStackTrace();
            Log.e(TAG, "connecter() InterruptedException = " + e.toString());
            return false;
        }
        catch(ExecutionException e)
        {
            // e.printStackTrace();
            Log.e(TAG, "connecter() ExecutionException = " + e.toString());
            return false;
        }
!!!139818.java!!!	reconnecter() : boolean
        if(!BaseDeDonnees.active)
            return false;
        deconnecter();
        return connecter();
!!!139946.java!!!	deconnecter() : boolean
        if(!BaseDeDonnees.active)
            return false;

        try
        {
            if(connexion != null)
            {
                connexion.close();
                Log.d(TAG, "deconnecter() retour = " + connexion.isClosed());
                if(connexion.isClosed())
                {
                    Message message = new Message();
                    message.what    = DECONNEXION_OK;
                    message.obj     = "";
                    if(handler != null)
                        handler.sendMessage(message);
                }
                else
                {
                    Message message = new Message();
                    message.what    = DECONNEXION_ERREUR;
                    message.obj     = "";
                    if(handler != null)
                        handler.sendMessage(message);
                }
                return connexion.isClosed();
            }
            return true;
        }
        catch(SQLException e)
        {
            // e.printStackTrace();
            Log.e(TAG, "deconnecter() ExecutionException = " + e.toString());
            Message message = new Message();
            message.what    = DECONNEXION_ERREUR;
            message.obj     = "";
            if(handler != null)
                handler.sendMessage(message);
            return false;
        }
!!!140074.java!!!	estConnecte() : boolean
        if(!BaseDeDonnees.active)
            return false;

        try
        {
            if(connexion != null)
                return !connexion.isClosed();
            else
                return false;
        }
        catch(SQLException e)
        {
            // e.printStackTrace();
            Log.e(TAG, "estConnecte() ExecutionException = " + e.toString());
            return false;
        }
!!!140586.java!!!	executerRequete(in requete : String) : void
        if(!BaseDeDonnees.active)
            return;

        if(estConnecte())
        {
            // Seulement pour les requêtes UPDATE, INSERT ou DELETE
            if(!requete.contains("UPDATE") && !requete.contains("INSERT") &&
               !requete.contains("DELETE"))
                return;

            // Exécute la requête dans un thread
            Thread requeteBDD = new Thread(new Runnable() {
                public void run()
                {
                    mutex.lock();
                    try
                    {
                        Log.d(TAG, "executerRequete() requete = " + requete);
                        Statement statement = connexion.createStatement();
                        int       nb        = statement.executeUpdate(requete);
                        if(nb > 0)
                        {
                            Message message = new Message();
                            message.what    = REQUETE_SQL_OK;
                            message.obj     = Integer.toString(nb);
                            if(handler != null)
                                handler.sendMessage(message);
                        }
                        else
                        {
                            Message message = new Message();
                            message.what    = REQUETE_SQL_ERREUR;
                            message.obj     = "";
                            if(handler != null)
                                handler.sendMessage(message);
                        }
                    }
                    catch(Exception e)
                    {
                        // e.printStackTrace();
                        Log.e(TAG, "executerRequete() Exception = " + e.toString());
                    }
                    finally
                    {
                        mutex.unlock();
                    }
                }
            });

            // Démarrage de l'exécution de la requête
            requeteBDD.start();
        }
        else
        {
            Log.w(TAG, "executerRequete() Pas de connexion MySQL !");
        }
!!!140714.java!!!	selectionner(in requeteSELECT : String) : void
        Log.d(TAG, "selectionner()");
        if(!BaseDeDonnees.active)
            return;

        // Seulement pour les requêtes SELECT
        if(!requeteSELECT.contains("SELECT"))
            return;

        if(bdd.estConnecte())
        {
            Thread requeteBDD = new Thread(new Runnable() {
                public void run()
                {
                    bdd.mutex.lock();
                    try
                    {
                        Log.d(TAG, "Requête : " + requeteSELECT);
                        Statement statement       = bdd.connexion.createStatement();
                        ResultSet resultatRequete = statement.executeQuery(requeteSELECT);
                        Message   message         = new Message();
                        message.what              = REQUETE_SQL_SELECT;
                        message.obj               = resultatRequete;
                        if(handler != null)
                            handler.sendMessage(message);
                    }
                    catch(Exception e)
                    {
                        e.printStackTrace();
                        Log.e(TAG, "BDD -> exception : " + e.toString());
                    }
                    finally
                    {
                        bdd.mutex.unlock();
                    }
                }
            });

            // Démarrage
            requeteBDD.start();
        }
        else
        {
            Log.w(TAG, "Pas de connexion MySQL !");
        }
!!!140842.java!!!	recupererDistributeurs() : void
        if(BaseDeDonnees.active)
        {
            if(estConnecte())
            {
                Thread requeteBDD = new Thread(new Runnable() {
                    public void run()
                    {
                        mutex.lock();
                        try
                        {
                            String requeteSQLDistributeurs =
                              "SELECT Distributeur.*, Intervention.aRemplir, Intervention.aDepanner FROM Distributeur\n"
                              +
                              " LEFT JOIN Intervention ON Distributeur.idDistributeur = Intervention.idDistributeur ";
                            Log.d(TAG, "Requete : " + requeteSQLDistributeurs);
                            Statement statement =
                              connexion.createStatement(ResultSet.TYPE_FORWARD_ONLY,
                                                        ResultSet.CONCUR_READ_ONLY);
                            ResultSet resultatRequeteDistributeurs =
                              statement.executeQuery(requeteSQLDistributeurs);
                            Map<Integer, Distributeur> distributeurs =
                              new HashMap<Integer, Distributeur>();
                            while(resultatRequeteDistributeurs.next())
                            {
                                Log.d(TAG,
                                      "recupererDistributeurs() idDistributeur : " +
                                        resultatRequeteDistributeurs.getInt("idDistributeur"));
                                Location coordGeographiques = new Location("Non défini");
                                coordGeographiques.setLatitude(
                                  resultatRequeteDistributeurs.getDouble("latitude"));
                                coordGeographiques.setLongitude(
                                  resultatRequeteDistributeurs.getDouble("longitude"));
                                Distributeur distributeur = new Distributeur(
                                  resultatRequeteDistributeurs.getInt("idDistributeur"),
                                  resultatRequeteDistributeurs.getString("codepostal"),
                                  resultatRequeteDistributeurs.getString("adresse"),
                                  resultatRequeteDistributeurs.getString("ville"),
                                  resultatRequeteDistributeurs.getString("nomDistributeur"),
                                  coordGeographiques,
                                  new ArrayList<Bac>());
                                distributeur.remplir(
                                  (resultatRequeteDistributeurs.getInt("aRemplir") == 0));
                                distributeur.depanner(
                                  (resultatRequeteDistributeurs.getInt("aDepanner") == 0));
                                Log.d(TAG, "Nouveau distributeur : " + distributeur);
                                distributeurs.put(
                                  resultatRequeteDistributeurs.getInt("idDistributeur"),
                                  distributeur);
                            }
                            String requeteSQLBacs =
                              "SELECT Distributeur.*,Produit.*,Bac.* FROM Bac\n"
                              +
                              "INNER JOIN Distributeur ON Distributeur.idDistributeur=Bac.idDistributeur\n"
                              + "INNER JOIN Produit ON Produit.idProduit=Bac.idProduit\n"
                              +
                              "INNER JOIN ServeurTTN ON ServeurTTN.idServeurTTN=Distributeur.idServeurTTN;";
                            Log.d(TAG, "Requete : " + requeteSQLBacs);
                            ResultSet resultatRequeteBacs = statement.executeQuery(requeteSQLBacs);
                            while(resultatRequeteBacs.next())
                            {
                                Log.d(TAG,
                                      "recupererDistributeurs() idDistributeur = " +
                                        resultatRequeteBacs.getInt("idDistributeur"));
                                if(distributeurs.containsKey(
                                     resultatRequeteBacs.getInt("idDistributeur")))
                                {
                                    distributeurs.get(resultatRequeteBacs.getInt("idDistributeur"))
                                      .ajouterBac(
                                        new Bac(new Produit(
                                                  resultatRequeteBacs.getString("nomProduit"),
                                                  resultatRequeteBacs.getDouble("prix"),
                                                  resultatRequeteBacs.getDouble("poidsUnitaire"),
                                                  resultatRequeteBacs.getDouble("volumeUnitaire")),
                                                resultatRequeteBacs.getDouble("poidsActuel"),
                                                resultatRequeteBacs.getDouble("poidsTotal"),
                                                resultatRequeteBacs.getInt("hygrometrie"),
                                                resultatRequeteBacs.getDouble("remplissage")));
                                }
                                Log.d(
                                  TAG,
                                  "recupererDistributeurs() idDistributeur = " +
                                    resultatRequeteBacs.getInt("idDistributeur") + " nbBacs = " +
                                    distributeurs.get(resultatRequeteBacs.getInt("idDistributeur"))
                                      .getNbBacs());
                            }
                            listeDistributeurs =
                              new ArrayList<Distributeur>(distributeurs.values());
                            Message message = new Message();
                            message.what    = REQUETE_SQL_SELECT_DISTRIBUTEURS;
                            message.obj     = listeDistributeurs;
                            if(handler != null)
                                handler.sendMessage(message);
                        }
                        catch(Exception e)
                        {
                            // e.printStackTrace();
                            Log.e(TAG, "recupererDistributeurs() Exception = " + e.toString());
                        }
                        finally
                        {
                            mutex.unlock();
                        }
                    }
                });

                // Démarrage
                requeteBDD.start();
            }
            else
            {
                Log.w(TAG, "Pas de connexion MySQL !");
            }
        }
        else
        {
            // Pour les tests
            // simule une base de données
            List<Bac> bacsDistributeur1 = Arrays.asList(
              new Bac(new Produit("Cacahuète", 0.49, 0.001, 0.004), 1.5, 2, 0, 0),
              new Bac(new Produit("Riz Basmati Blanc", 0.35, 0.00005, 0.0003), 0.8, 1.3, 0, 0),
              new Bac(new Produit("Fèves entières", 0.3, 0.002, 0.003), 1.5, 8, 0, 6.5));

            List<Bac> bacsDistributeur2 = Arrays.asList(
              new Bac(new Produit("Banane CHIPS", 0.76, 0.003, 0.002), 5.0, 12, 0, 7.0),
              new Bac(new Produit("Abricots secs", 1.13, 0.008, 0.004), 14.0, 16, 0, 0),
              new Bac(new Produit("Raisin sec", 0.39, 0.002, 0.001), 10.5, 16, 0, 0));

            List<Bac> bacsDistributeur3 = Arrays.asList(
              new Bac(new Produit("Cranberries", 2.1, 0.0006, 0.0005), 9.6, 9.6, 1, 0),
              new Bac(new Produit("Pruneaux", 1.15, 0.008, 0.004), 7.5, 16, 0, 8.5),
              new Bac(new Produit("Fruits sec", 1.06, 0.00035, 0.0004), 6.2, 7, 0, 0));

            listeDistributeurs           = new ArrayList<Distributeur>();
            Location coordGeographiques1 = new Location("Non défini");
            coordGeographiques1.setLatitude(44.137327);
            coordGeographiques1.setLongitude(4.81958);
            Location coordGeographiques2 = new Location("Non défini");
            coordGeographiques2.setLatitude(43.9416435);
            coordGeographiques2.setLongitude(4.8008485);
            Location coordGeographiques3 = new Location("Non défini");
            coordGeographiques3.setLatitude(44.048701);
            coordGeographiques3.setLongitude(5.0424848);
            listeDistributeurs.add(new Distributeur(1,
                                                    "84100",
                                                    "Avenue Frédéric Mistral",
                                                    "Orange",
                                                    "Gare Orange",
                                                    coordGeographiques1,
                                                    bacsDistributeur1));
            listeDistributeurs.add(new Distributeur(2,
                                                    "84000",
                                                    "Boulevard Saint-Roch",
                                                    "Avignon",
                                                    "Gare Avignon Centre",
                                                    coordGeographiques2,
                                                    bacsDistributeur2));
            listeDistributeurs.add(new Distributeur(3,
                                                    "84200",
                                                    "Avenue De La Gare",
                                                    "Carpentras",
                                                    "Gare de Carpentras",
                                                    coordGeographiques3,
                                                    bacsDistributeur3));
            Message message = new Message();
            message.what    = REQUETE_SQL_SELECT_DISTRIBUTEURS;
            message.obj     = listeDistributeurs;
            if(handler != null)
                handler.sendMessage(message);
        }
!!!140970.java!!!	recupererInterventions() : void
        if(BaseDeDonnees.active)
        {
            if(estConnecte())
            {
                Thread requeteBDD = new Thread(new Runnable() {
                    public void run()
                    {
                        mutex.lock();
                        try
                        {
                            String requeteSQL =
                              "SELECT Intervention.* FROM Intervention INNER JOIN Distributeur ON Intervention.idDistributeur = Distributeur.idDistributeur";
                            Log.d(TAG, "Requete : " + requeteSQL);
                            Statement statement =
                              connexion.createStatement(ResultSet.TYPE_FORWARD_ONLY,
                                                        ResultSet.CONCUR_READ_ONLY);
                            ResultSet resultatRequete = statement.executeQuery(requeteSQL);
                            listeInterventions        = new ArrayList<Intervention>();
                            while(resultatRequete.next())
                            {
                                for(Distributeur distributeur: listeDistributeurs)
                                {
                                    Log.d(TAG,
                                          "recupererInterventions() pour le distributeur : " +
                                            distributeur.getIdentifiant() +
                                            " == " + resultatRequete.getInt("idDistributeur"));
                                    Intervention.Etats etat = Intervention.Etats.A_FAIRE;
                                    if(distributeur.getIdentifiant() ==
                                       resultatRequete.getInt("idDistributeur"))
                                    {
                                        Log.d(TAG,
                                              "recupererInterventions() distributeur = " +
                                                distributeur.getNom() + "dateIntervention = " +
                                                resultatRequete.getString("dateIntervention") +
                                                " - état = " +
                                                etat.valueOf(resultatRequete.getString("etat")) +
                                                " - aRemplir = " +
                                                (resultatRequete.getInt("aRemplir") == 1) +
                                                " - aDepanner = " +
                                                (resultatRequete.getInt("aDepanner") == 1));
                                        listeInterventions.add(new Intervention(
                                          resultatRequete.getString("dateIntervention"),
                                          distributeur,
                                          etat.valueOf(resultatRequete.getString("etat")),
                                          (resultatRequete.getInt("aRemplir") == 1),
                                          (resultatRequete.getInt("aDepanner") == 1)));
                                    }
                                    else
                                    {
                                        Log.d(TAG,
                                              "recupererInterventions() pas d'intervention prévue");
                                    }
                                }
                            }
                            Message message = new Message();
                            message.what    = REQUETE_SQL_SELECT_INTERVENTIONS;
                            message.obj     = listeInterventions;
                            if(handler != null)
                                handler.sendMessage(message);
                        }
                        catch(Exception e)
                        {
                            // e.printStackTrace();
                            Log.e(TAG, "recupererInterventions() Exception = " + e.toString());
                        }
                        finally
                        {
                            mutex.unlock();
                        }
                    }
                });

                // Démarrage
                requeteBDD.start();
            }
            else
            {
                Log.w(TAG, "Pas de connexion MySQL !");
            }
        }
        else
        {
            Intervention.Etats etat = Intervention.Etats.A_FAIRE;
            listeInterventions.clear();
            listeInterventions.add(
              new Intervention("2023-06-01", listeDistributeurs.get(0), etat, true, false));
            Message message = new Message();
            message.what    = REQUETE_SQL_SELECT_INTERVENTIONS;
            message.obj     = listeInterventions;
            if(handler != null)
                handler.sendMessage(message);
        }
!!!160938.java!!!	recupererOperateurs() : void
        List<Operateur> listeOperateurs = new ArrayList<Operateur>();
        if(BaseDeDonnees.active)
        {
            if(estConnecte())
            {
                /**
                 * @todo Récupérer les opérateur à partir de la BDD
                 */
            }
        }
        else
        {
            listeOperateurs.clear();
            listeOperateurs.add(
              new Operateur("FARGIER", "Mayeul", "mfargier", "mfargier@justfeed.fr", 1));
            listeOperateurs.add(
              new Operateur("ROUANET", "Nicolas", "nrouanet", "nrouanet@justfeed.fr", 2));
            listeOperateurs.add(
              new Operateur("SALAUN", "Matthieu", "msalaun", "msalaun@justfeed.fr", 3));
            Message message = new Message();
            message.what    = REQUETE_SQL_SELECT_OPERATEURS;
            message.obj     = listeOperateurs;
            if(handler != null)
                handler.sendMessage(message);
        }
