class JustFeed
!!!144682.java!!!	onCreate(inout savedInstanceState : Bundle) : void
        super.onCreate(savedInstanceState);
        setContentView(R.layout.justfeed);
        Log.d(TAG, "onCreate()");

        chargerPreferences();

        initialiserVueListeDistributeurs();
        initialiserHandler();
        initialiserBaseDeDonnees();

        baseDeDonnees.recupererOperateurs();
        baseDeDonnees.recupererDistributeurs();
!!!161322.java!!!	onCreateOptionsMenu(inout menu : Menu) : boolean
        MenuInflater inflater = getMenuInflater();
        inflater.inflate(R.menu.menu, menu);

        return true;
!!!170026.java!!!	onPrepareOptionsMenu(inout menu : Menu) : boolean
        SubMenu sousMenu = menu.getItem(INDEX_MENU_OPERATEURS).getSubMenu();
        sousMenu.clear();

        if(listeOperateurs != null)
        {
            int index = 0;
            for(Operateur operateur: listeOperateurs)
            {
                sousMenu.add(NONE, operateur.getIdOperateur(), NONE, operateur.getIdentifiant());
                if(operateur.getIdOperateur() == idOperateur)
                {
                    sousMenu.getItem(index).setChecked(true);
                    SpannableString s =
                      new SpannableString(sousMenu.getItem(index).getTitle().toString());
                    s.setSpan(new ForegroundColorSpan(Color.RED), 0, s.length(), 0);
                    sousMenu.getItem(index).setTitle(s);
                }
                ++index;
            }
        }

        return super.onPrepareOptionsMenu(menu);
!!!161450.java!!!	onOptionsItemSelected(inout item : MenuItem) : boolean
        switch(item.getItemId())
        {
            case R.id.interventions:
                lancerActiviteIntervention();
                return true;
            case R.id.aPropos:
                afficherAPropos();
                return true;
            default:
                idOperateur = item.getItemId();
                sauvegarderIdOperateur();
        }

        return super.onOptionsItemSelected(item);
!!!144810.java!!!	onStart() : void
        super.onStart();
        Log.d(TAG, "onStart()");
!!!144938.java!!!	onResume() : void
        super.onResume();
        Log.d(TAG, "onResume()");
        baseDeDonnees.setHandler(handler);
        baseDeDonnees.recupererDistributeurs();
!!!145066.java!!!	onPause() : void
        super.onPause();
        Log.d(TAG, "onPause()");
!!!145194.java!!!	onStop() : void
        super.onStop();
        Log.d(TAG, "onStop()");
!!!145322.java!!!	onDestroy() : void
        Log.d(TAG, "onDestroy()");
        enregistrerPreferences();
        super.onDestroy();
!!!145578.java!!!	initialiserBaseDeDonnees() : void
        // Récupère l'instance de BaseDeDonnees
        baseDeDonnees = BaseDeDonnees.getInstance(handler);
!!!145706.java!!!	initialiserVueListeDistributeurs() : void
        this.vueListeDistributeurs = (RecyclerView)findViewById(R.id.listeDistributeurs);
        this.vueListeDistributeurs.setHasFixedSize(true);
        this.layoutVueListeDistributeurs = new LinearLayoutManager(this);
        this.vueListeDistributeurs.setLayoutManager(this.layoutVueListeDistributeurs);
!!!145834.java!!!	afficherDistributeurs(inout distributeurs : List<Distributeur>) : void
        Log.d(TAG, "afficherDistributeurs() nb distributeurs = " + distributeurs.size());
        this.listeDistributeurs = distributeurs;
        if(this.adapteurDistributeur == null)
        {
            this.adapteurDistributeur = new AdaptateurDistributeur(this.listeDistributeurs);
            this.vueListeDistributeurs.setAdapter(this.adapteurDistributeur);
        }
        adapteurDistributeur.notifyDataSetChanged();
!!!145962.java!!!	initialiserHandler() : void
        this.handler = new Handler(this.getMainLooper()) {
            @Override
            public void handleMessage(@NonNull Message message)
            {
                // Log.d(TAG, "[Handler] id message = " + message.what);
                // Log.d(TAG, "[Handler] message = " + message.obj.toString());

                switch(message.what)
                {
                    case BaseDeDonnees.CONNEXION_OK:
                        Log.d(TAG, "[Handler] CONNEXION_OK");
                        break;
                    case BaseDeDonnees.CONNEXION_ERREUR:
                        Log.d(TAG, "[Handler] CONNEXION_ERREUR");
                        break;
                    case BaseDeDonnees.DECONNEXION_OK:
                        Log.d(TAG, "[Handler] DECONNEXION_OK");
                        break;
                    case BaseDeDonnees.DECONNEXION_ERREUR:
                        Log.d(TAG, "[Handler] DECONNEXION_ERREUR");
                        break;
                    case BaseDeDonnees.REQUETE_SQL_OK:
                        Log.d(TAG, "[Handler] REQUETE_SQL_OK");
                        break;
                    case BaseDeDonnees.REQUETE_SQL_ERREUR:
                        Log.d(TAG, "[Handler] REQUETE_SQL_ERREUR");
                        break;
                    case BaseDeDonnees.REQUETE_SQL_SELECT:
                        Log.d(TAG, "[Handler] REQUETE_SQL_SELECT");
                        break;
                    case BaseDeDonnees.REQUETE_SQL_SELECT_DISTRIBUTEURS:
                        Log.d(TAG, "[Handler] REQUETE_SQL_SELECT_DISTRIBUTEURS");
                        afficherDistributeurs((ArrayList)message.obj);
                        break;
                    case BaseDeDonnees.REQUETE_SQL_SELECT_OPERATEURS:
                        Log.d(TAG, "[Handler] REQUETE_SQL_SELECT_OPERATEURS");
                        listeOperateurs = (ArrayList)message.obj;
                        invalidateOptionsMenu();
                }
            }
        };
!!!170154.java!!!	lancerActiviteIntervention() : void
        if(idOperateur != OPERATEUR_NON_DEFINI)
        {
            Intent activiteIntervention = new Intent(JustFeed.this, ActiviteInterventions.class);
            activiteIntervention.putExtra("idOperateur", idOperateur);
            startActivity(activiteIntervention);
        }
        else
        {
            afficherMessage("JustFeed", "Il faut sélectionner un opérateur dans le menu !");
        }
!!!170282.java!!!	recupererIdOperateur() : void
        if(preferencesPartagees.contains(PREFERENCES_ID_OPERATEUR))
        {
            idOperateur =
              preferencesPartagees.getInt(PREFERENCES_ID_OPERATEUR, OPERATEUR_NON_DEFINI);
            Log.d(TAG, "recupererIdOperateur() idOperateur = " + idOperateur);
        }
!!!170410.java!!!	sauvegarderIdOperateur() : void
        Log.d(TAG, "sauvegarderIdOperateur() idOperateur = " + idOperateur);
        preferencesPartagees.edit().putInt(PREFERENCES_ID_OPERATEUR, idOperateur).apply();
!!!161066.java!!!	chargerPreferences() : void
        if(preferencesPartagees == null)
            preferencesPartagees = getBaseContext().getSharedPreferences(PREFERENCES, MODE_PRIVATE);
        recupererIdOperateur();
!!!161194.java!!!	enregistrerPreferences() : void
        if(preferencesPartagees == null)
            preferencesPartagees = getBaseContext().getSharedPreferences(PREFERENCES, MODE_PRIVATE);
        sauvegarderIdOperateur();
!!!161962.java!!!	afficherAPropos() : void
        afficherMessage("JustFeed 2023", "BTS SN LaSalle Avignon\nFARGIER Mayeul");
!!!170538.java!!!	afficherMessage(in titre : String, in message : String) : void
        AlertDialog.Builder alertDialog = new AlertDialog.Builder(JustFeed.this);
        alertDialog.setTitle(titre);
        alertDialog.setMessage(message);
        alertDialog.setPositiveButton("Ok", new DialogInterface.OnClickListener() {
            public void onClick(DialogInterface dialog, int which)
            {
            }
        });
        AlertDialog alert = alertDialog.create();
        alert.setCanceledOnTouchOutside(true);
        alert.show();
